mouse_skin_size_control/2024_analysis


INSTALL: 

1) Use anaconda to create a new environment: conda create -n NAME_HERE pyhton=3.9. Activate the new environment using conda activate NAME_HERE

3) Install the required packages using conda: conda install -f requirements.txt

4) Pip two required packages:
pip install pystackreg (tested version = 0.2.7)
pip install trimesh (tested version = 3.18.0)

5) Download the repository from github: github.com/xies/xiesUtil

6) Add xiesUtils and mouse_skin_size_control/utils to the python path: conda develop /PATH/TO/xiesUtils and conda develop /PATH/TO/mouse_skin_size_control/utils

All the code are were developed as scripts to be run in a ipython-compatible IDE.



EXAMPLE USAGE:

A novel microenvironment feature analysis tool is presented in the manuscript. The main functionalities of this module are contained in /annotate_tissue_dense, with additional tissue boundary detection tools available in /flatten_tissue

The expected input data are 3D tissue images of nuclear and cell shapes, alongside high-quality 3D segmentation masks for the cell and nuclei. For mouse epidermal skin images, cellposeâ€™s 3D stitching mode works reasonably well. However, it is still necessary to extensively review the automatic annotations, or use the cellpose 2.0 human-in-the-loop training interface to refine the segmentation models. 


--

test_dataset.zip


(1) A small test image test_data/example_mouse_skin_image.tif is provided. The dimensions are: [Z,T,Channel,Y,X]. The channels are as follows:
1 - FUCCI-Cdt1 reporter
2 - Cell outline reporter
3 - Nuclear reporter
4 - nuclear masks
5 - cytoplasmic masks
6 - tracked cell masks
For the example the dataset was cropped to follow trackID = 374 in channel 6.

(2) test_data/example_2d_contact_map.tif: A basal layer contact map is needed to encode the cell-cell contacts within the basal layer. This can be generated by re-slicing the 3D tissue image to follow the surface of the basal layer.

(3) test_data/heightmaps.tif: the z-axis index of the epidermal-dermal boundary at that X,Y coordinate

(4) test_data/flattened_segmentation.tif: A flattened segmentation image is provided, which is a re-slicing in z-axis of the cytoplasmic masks (channel 4) based on the location of the epidermal-dermal boundary

(5) test_data/flat_tracked_cells.tif: Similar flattened cell masks (channel 6) tracking dividing cells through time

(6) test_data/collagen_gradients.tif: the X and Y- gradient images of the collagen layer is provided from which collagen orientations can be estimated

(7) test_data/g1_frame.txt: a CSV file denoting the G1 exit frame of each cellID corresponding to tracked cell masks (channel 6)

--

Generation of test datasets

(1) was generated by extensive manual correction of automated cell and nuclear segmentations generated by cellpose-2.0. The raw images were published by the Greco group in Mesa, Kawaguchi, and Cockburn, et al. Cell Stem Cell (2018).
(2) was generated by computationally identifying the basal surfaces of the basal layer cells and generating segmentation masks. The masks were then manually inspected to reflect the pattern of cell-cell contact at the basal position

(3) were generated using flatten_tissue/1__flatten_using_channel.py, which finds the z-position at each x,y position that maximizes the signal change in the Histone-GFP channel, which reflects the z-position of basal layer. This generated

(4)-(6) were generated by re-slicing in the z-dimension either the cytoplasmic masks (channel 5 in example_mouse_skin_image.tif), cytoplasmic masks of cells that complete divisions with tracking information (channel 6 in example_mouse_skin_image.tif), or the nuclear reporter (channel 3) which also happens to contain images of sub-basal collagen fibrils generated by second harmonic generation. The collagen images were then blurred with a large Gaussian filter (sigma = 5px) and the x- and y-gradients were generated and saved.

(7) the G1 exit frames were annotated manually by looking at the FUCCI-Cdt1 reporter (channel 1) as the frame that corresponds to a drop in the FUCCI signal.

--

The script interface can be followed in sequence.

1__annotate_adjacency_from_flat_cortical_seg: generates cell-cell adjacency matrices from the contact map (also called flat cortical segmentations). The convention is that nuclear segmentation IDs will be used to uniquely identity each cell. Run-time <10s on demo.
2__collate_nuclear_and_cyto: map cytoplasmic segmentations onto nuclear segmentations. Run time <10s on demo
3__annotate_tissue_densely: generates cell and neighborhood features. Run time <30s on demo
3a__plot_diagnostics: optional plotting tools
4__annotate_basal_dividing_cells: generate image statistics for dividing cells. Run time <10s on demo.
5__combine_dividing_cells_and_dense_tissue_annotations: combine dividing cell features and microenvironment features. Run time <1s on demo

Intermediate files will be generated, including a folder called ./Image flattening that contains cell-cell adjacency matrices. Two intermediate dataframes will be generated: cyto_dataframe.csv and tissue_dataframe.csv. basal_no_daughters.pkl will also be generated from the sparsely tracked cells that complete their cell cycles wihtin the movie.

The final file used for later analysis is: ts_features.csv, which contains a large table for all dividing cells over time, and their respective microenvironment feature. This matrix is directly used by scripts in tissue_dynamics_model to perform statistical modeling of the predictor of the G1/S transition. All scripts begin with 1__prepare_data_matrix, which prepares a sanitized and standardized data matrix, which is subsequently used to construct different models.


Expected run time: <1 min for test dataset.
